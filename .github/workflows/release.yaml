# This action assumes that there is a REL-commit which already has a
# Markdown-formatted git tag. Hence the CHANGELOG is already adjusted
# and it's decided what should be in the release.
# This action only ensures the release is done with the proper contents
# and that it's announced with a Github release.
name: Publish Python Package to PyPI
on:
  push:
    tags:
      - '*.*.*'

jobs:
  build_and_publish:
    # this doesn't make sense if you don't have the PyPI secret
    if: github.repository == 'py-pdf/pdfly'
    name: Publish a new version
    runs-on: ubuntu-latest

    steps:
      # Ensure it's on PyPI
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Flit
        run: |
          python -m pip install --upgrade pip
          pip install flit

      - name: Publish Package to PyPIðŸš€
        env:
          FLIT_USERNAME: '__token__'
          FLIT_PASSWORD: ${{ secrets.FLIT_PASSWORD }}
        run: |
          git fetch --tags --force
          latest_tag=$(git describe --tags --abbrev=0)
          flit publish --repository pypi --tag $latest_tag

      # Create the Github Page
      - name: Prepare variables
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          tag_body=$(git tag -l "${latest_tag}" --format='%(contents:body)')
      - name: Create GitHub Release ðŸš€
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: ${{ steps.build_and_publish.outputs.tag_body }}
